/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {
    behaviors {
    td_layer_0: tap_dance_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_TO_1";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&mo 1>, <&to 1>;
    };
    td_layer_2: tap_dance_2 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_TO_3";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&mo 3>, <&to 3>;
    };
    td_lshift: tap_dance_3 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_LOCK_LSHIFT";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LSHIFT>, <&kt LSHIFT>;
    };
    td_rshift: tap_dance_4 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_LOCK_RSHIFT";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp RSHIFT>, <&kt RSHIFT>;
    };
    td_bkspace: tap_dance_5 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_BACKSPACE";
        #binding-cells = <0>;
        tapping-term-ms = <1>;
        bindings = <&kp BACKSPACE>, <&kp HOME>;
    };
    td_right: tap_dance_6 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_RIGHT";
        #binding-cells = <0>;
        tapping-term-ms = <185>;
        bindings = <&kp RIGHT>, <&kp DELETE>;
    };
    td_qgame: tap_dance_7 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_QUIT_GAMING";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp T>, <&to 2>;
    };
    cap_tab: cap_tab {
        compatible = "zmk,behavior-mod-morph";
        label = "CAP_TAB";
        #binding-cells = <0>;
        bindings = <&kp CAPS>, <&kp TAB>;
        mods = <(MOD_LCTL|MOD_LGUI)>;
        keep-mods = <(MOD_LCTL|MOD_LGUI)>;
    };
    bslh_hold: bslh_hold {
        compatible = "zmk,behavior-hold-tap";
	label = "BSLH_HOLD";
	#binding-cells = <2>;
	flavor = "hold-preferred";
	tapping-term-ms = <200>;
	quick-tap-ms = <125>;
	global-quick-tap;
	bindings = <&mo>, <&kp>;
    };
 };

};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_mac {
            bindings = <
  &mt ESC F1     &kp F2    &kp F3     &kp F4  &magic 5 0                                                                                &bslh_hold 1 F8     &kp F9   &kp F10    &kp F11            &kp F12
      &kp N1     &kp N2    &kp N3     &kp N4      &kp N5  &kp N6                                                                &kp N7           &kp N8     &kp N9    &kp N0   &kp LBKT           &kp RBKT
 &td_layer_0      &kp Q     &kp W      &kp E       &kp R   &kp T                                                                 &kp Y            &kp U      &kp I     &kp O      &kp P  &bslh_hold 1 BSLH
    &cap_tab      &kp A     &kp S      &kp D       &kp F   &kp G                                                                 &kp H            &kp J      &kp K     &kp L   &kp SEMI            &kp SQT
   &kp LSHFT      &kp Z     &kp X      &kp C       &kp V   &kp B   &kp BSPC  &kp END  &kp PG_UP    &kp UP  &kp LEFT  &kp RIGHT   &kp N            &kp M  &kp COMMA   &kp DOT   &kp FSLH          &kp RSHFT
  &kp APPLE_FN  &kp LCTRL  &kp LALT  &kp MINUS    &kp LGUI          &kp SPACE  &kp TAB  &kp PG_DN  &kp DOWN   &kp RET  &kp SPACE                 &kp RGUI  &kp EQUAL  &kp RALT  &kp RCTRL         &td_rshift
            >;
        };

        layer_mo1 {
            bindings = <
   &kp ESC      &none    &kp C_BRI_DN    &kp C_BRI_UP           &kp F5                                                                                     &kp C_VOL_DN  &kp C_VOL_UP    &kp C_MUTE          &kp F11    &kp F12
 &kp GRAVE      &to 2           &none           &none       &magic 5 0   &kp F6                                                                    &kp F7    &kp KP_NUM      &kp SLCK       &kp INS        &kp PSCRN      &none
     &to 0    &kp RET         &kp RET    &kp UP_ARROW          &kp F11  &kp F12                                                                &kp C_PREV     &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_SLASH      &none
  &cap_tab      &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW    &to 4                                                                &kp C_NEXT     &kp KP_N4     &kp KP_N5     &kp KP_N6  &kp KP_MULTIPLY      &none
 &kp LSHFT      &none           &none           &none            &none    &none   &kp HOME  &kp END  &kp PG_UP  &kp PG_UP    &none    &kp DEL    &kp C_PP     &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_MINUS  &kp RSHFT
 &kp APPLE_FN  &kp LCTRL        &kp LALT       &kp MINUS         &kp LGUI           &kp SPACE  &kp TAB  &kp PG_DN  &kp PG_DN  &kp RET  &kp SPACE                 &kp KP_N0    &kp KP_DOT  &kp KP_ENTER      &kp KP_PLUS  &kp RSHFT
            >;
        };

        layer_l90_win {
            bindings = <
  &mt ESC F1     &kp F2    &kp F3    &kp F4  &magic 5 0                                                                                &bslh_hold 3 F8     &kp F9   &kp F10    &kp F11            &kp F12
      &kp N1     &kp N2    &kp N3    &kp N4      &kp N5  &kp N6                                                                &kp N7           &kp N8     &kp N9    &kp N0   &kp LBKT           &kp RBKT
 &td_layer_2      &kp Q     &kp W     &kp E       &kp R   &kp T                                                                 &kp Y            &kp U      &kp I     &kp O      &kp P  &bslh_hold 3 BSLH
    &cap_tab      &kp A     &kp S     &kp D       &kp F   &kp G                                                                 &kp H            &kp J      &kp K     &kp L   &kp SEMI            &kp SQT
   &kp LSHFT      &kp Z     &kp X     &kp C       &kp V   &kp B   &kp BSPC  &kp END  &kp PG_UP    &kp UP  &kp LEFT  &kp RIGHT   &kp N            &kp M  &kp COMMA   &kp DOT   &kp FSLH          &kp RSHFT
  &td_lshift  &kp LCTRL  &kp LGUI  &kp LALT   &kp MINUS          &kp SPACE  &kp TAB  &kp PG_DN  &kp DOWN   &kp RET  &kp SPACE                &kp EQUAL   &kp RALT  &kp RGUI  &kp RCTRL         &td_rshift
            >;
        };

        layer_mo2 {
            bindings = <
   &kp ESC      &none  &kp C_BRI_DN  &kp C_BRI_UP      &kp F5                                                                                     &kp C_VOL_DN  &kp C_VOL_UP    &kp C_MUTE          &kp F11    &kp F12
 &kp GRAVE      &to 0         &none         &none  &magic 5 0   &kp F6                                                                    &kp F7    &kp KP_NUM      &kp SLCK       &kp INS        &kp PSCRN      &none
     &to 2    &kp RET       &kp RET        &kp UP     &kp F11  &kp F12                                                                &kp C_PREV     &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_SLASH      &none
  &cap_tab      &none      &kp LEFT      &kp DOWN   &kp RIGHT    &to 4                                                                &kp C_NEXT     &kp KP_N4     &kp KP_N5     &kp KP_N6  &kp KP_MULTIPLY      &none
 &kp LSHFT      &none         &none         &none       &none    &none   &kp HOME  &kp END  &kp PG_UP  &kp PG_UP    &none    &kp DEL    &kp C_PP     &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_MINUS  &kp RSHFT
 &kp LSHFT  &kp LCTRL      &kp LGUI      &kp LALT   &kp MINUS           &kp SPACE  &kp TAB  &kp PG_DN  &kp PG_DN  &kp RET  &kp SPACE                 &kp KP_N0    &kp KP_DOT  &kp KP_ENTER      &kp KP_PLUS  &kp RSHFT
            >;
        };

        layer_gaming {
            bindings = <
 &mt F1 ESC     &kp F2    &kp F3    &kp F4  &magic 5 0                                                                                    &kp F8     &kp F9   &kp F10    &kp F11    &kp F12
     &kp N9     &kp N0    &kp N1    &kp N2      &kp N3  &kp N4                                                                 &kp N5     &kp N6     &kp N7    &kp N8   &kp LBKT   &kp RBKT
  &td_qgame    &kp TAB     &kp Q     &kp W       &kp E   &kp R                                                                  &kp Y      &kp U      &kp I     &kp O      &kp P   &kp BSLH
      &kp G   &kp CAPS     &kp A     &kp S       &kp D   &kp F                                                                  &kp H      &kp J      &kp K     &kp L   &kp SEMI    &kp SQT
      &kp B  &kp LSHFT     &kp Z     &kp X       &kp C   &kp V   &kp BSPC  &kp HOME  &kp PG_UP    &kp UP  &kp LEFT  &kp RIGHT   &kp N      &kp M  &kp COMMA   &kp DOT   &kp FSLH  &kp RSHFT
  &kp LSHFT  &kp LCTRL  &kp LGUI  &kp LALT   &kp MINUS          &kp SPACE   &kp END  &kp PG_DN  &kp DOWN   &kp RET  &kp SPACE          &kp EQUAL   &kp RALT  &kp RGUI  &kp RCTRL  &kp RSHFT
            >;
        };

        layer_magic_5_0 {
            bindings = <
 &bt BT_CLR            &none            &none            &none            &none                                                                            &none   &none   &none   &none  &bt BT_CLR_ALL
      &bt_0            &bt_1            &bt_2            &bt_3     &out OUT_USB            &none                                                   &none   &none   &none   &none   &none           &none
      &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none   &none   &none   &none   &none           &none
      &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none   &none   &none   &none   &none           &none
      &none            &none            &none            &none            &none            &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none           &none
     &reset            &none            &none            &none            &none                    &none   &none   &none   &none   &none   &none           &none   &none   &none   &none          &reset
            >;
        };
    };
};
