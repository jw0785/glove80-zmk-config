/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
	#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {
    combos {
        compatible = "zmk,combos";
        combo_shiftl {
            timeout-ms = <50>;
            key-positions = <46 64>;
            bindings = <&kp LSHIFT>;
        };
        combo_shiftr {
            timeout-ms = <50>;
            key-positions = <63 79>;
            bindings = <&kp RSHIFT>;
        };
		combo_home {
            timeout-ms = <15>;
            key-positions = <52 53>;
            bindings = <&kp HOME>;
        };
		combo_delete {
            timeout-ms = <15>;
            key-positions = <56 57>;
            bindings = <&kp DEL>;
        };
    };
    
    behaviors {
    td_layer_0: tap_dance_0 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_TO_1";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&mo_tap 1 RET>, <&to 1>;
    };
    td_layer_2: tap_dance_2 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_TO_3";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&mo_tap 3 RET>, <&to 3>;
    };
    td_layer_3: tap_dance_a {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_DANCE_TO_6";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&mo_tap 6 RET>, <&to 6>;
    };
    td_lshift: tap_dance_3 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_LOCK_LSHIFT";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp LSHIFT>, <&kt LSHIFT>;
    };
	td_toggle_1: td_toggle_1 {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_TOGGLE_1";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp APPLE_FN>, <&tog 8>;
    };
		td_toggle_2: td_toggle_2 {
			compatible = "zmk,behavior-tap-dance";
			label = "TD_TOGGLE_2";
			#binding-cells = <0>;
			tapping-term-ms = <200>;
			bindings = <&kp LSHFT>, <&tog 8>;
		};
    td_rshift: tap_dance_4 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_LOCK_RSHIFT";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp RSHIFT>, <&kt RSHIFT>;
    };
    td_bkspace: tap_dance_5 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_BACKSPACE";
        #binding-cells = <0>;
        tapping-term-ms = <1>;
        bindings = <&kp BACKSPACE>, <&kp HOME>;
    };
    td_right: tap_dance_6 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_RIGHT";
        #binding-cells = <0>;
        tapping-term-ms = <185>;
        bindings = <&kp RIGHT>, <&kp DELETE>;
    };
    td_qgame: tap_dance_7 {
        compatible = "zmk,behavior-tap-dance";
        label = "TAP_QUIT_GAMING";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp T>, <&to_5>;
    };
	concatenate: concatenate {
		label = "CONCATENATE";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
			= <&macro_tap &kp DOWN &kp HOME &kp BACKSPACE &kp SPACE>;
	};
    cap_tab: cap_tab {
        compatible = "zmk,behavior-mod-morph";
        label = "CAP_TAB";
        #binding-cells = <0>;
        bindings = <&kp CAPS>, <&kp TAB>;
        mods = <(MOD_LCTL|MOD_LGUI)>;
        keep-mods = <(MOD_LCTL|MOD_LGUI)>;
    };
         cap_tab_bi: cap_tab_bi {
                compatible = "zmk,behavior-mod-morph";
                label = "CAP_TAB_BI";
                #binding-cells = <0>;
                bindings = <&kp CAPS>, <&kp RC(TAB)>;
                mods = <(MOD_LALT|MOD_RALT)>;
        };
    cap_tab_tri: cap_tab_tri {
        compatible = "zmk,behavior-mod-morph";
        label = "CAP_TAB_TRI";
        #binding-cells = <0>;
        bindings = <&cap_tab_bi>, <&kp RA(TAB)>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
    };
    win_quit: win_quit {
        compatible = "zmk,behavior-mod-morph";
        label = "WIN_QUIT";
        #binding-cells = <0>;
        bindings = <&kp Q>, <&wq_hold RA(F4) RC(Q)>;
        mods = <(MOD_LCTL)>;
    };
		wq_hold: wq_hold {
			compatible = "zmk,behavior-hold-tap";
			label = "WQ_HOLD";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
	win_menu: win_menu {
        compatible = "zmk,behavior-mod-morph";
        label = "WIN_MENU";
        #binding-cells = <0>;
        bindings = <&kp M>, <&wq_hold RS(F10) RC(M)>;
        mods = <(MOD_LCTL)>;
    };
	to_5: to_5 {
		label = "TO_5";
		compatible = "zmk,behavior-macro";
		#binding-cells = <0>;
		bindings
			= <&to 5>,
			  <&tog 8>;
	};
	
 /*
        _win_screenshot: _win_screenshot {
            compatible = "zmk,behavior-mod-morph";
            label = "_WIN_SCREENSHOT";
            #binding-cells = <0>;
            bindings = <&kp RC(N3)>, <&kp RG(PSCRN)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    win_3_screenshot: win_3_screenshot {
        compatible = "zmk,behavior-mod-morph";
        label = "WIN_3_SCREENSHOT";
        #binding-cells = <0>;
        bindings = <&kp N3>, <&_win_screenshot>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
    };
        _win_snip: _win_snip{
            compatible = "zmk,behavior-mod-morph";
            label = "_WIN_SNIP";
            #binding-cells = <0>;
            bindings = <&kp RC(N4)>, <&kp RG(RS(S))>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    win_4_snip: win_4_snip{
        compatible = "zmk,behavior-mod-morph";
        label = "WIN_4_SNIP";
        #binding-cells = <0>;
        bindings = <&kp N4>, <&_win_snip>;
        mods = <(MOD_LCTL|MOD_RCTL)>;
    };
*/
    bksp_concatenate: bksp_concatenate {
        compatible = "zmk,behavior-mod-morph";
        label = "BKSP_CONCATENATE";
        #binding-cells = <0>;
        bindings = <&kp BACKSPACE>, <&concatenate>;
        mods = <(MOD_LCTL|MOD_RCTL|MOD_LGUI|MOD_RGUI)>;
    };
    mo_tap: mo_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MO_TAP";
        #binding-cells = <2>;
        flavor = "hold-preferred";
        tapping-term-ms = <175>;
        quick-tap-ms = <150>;
        global-quick-tap;
        bindings = <&mo>, <&kp>;
    };
 };

};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_mac {
            bindings = <
  &mt ESC F1     &kp F2    &kp F3     &kp F4  &magic 7 0                                                                                &mo_tap 1 F8     &kp F9   &kp F10    &kp F11            &kp F12
      &kp N1     &kp N2    &kp N3    &kp N4      &kp N5  &kp N6                                                                &kp N7           &kp N8     &kp N9    &kp N0   &kp LBKT           &kp RBKT
 &td_layer_0      &kp Q     &kp W      &kp E       &kp R   &kp T                                                                 &kp Y            &kp U      &kp I     &kp O      &kp P  &mo_tap 1 BSLH
    &cap_tab      &kp A     &kp S      &kp D       &kp F   &kp G                                                                 &kp H            &kp J      &kp K     &kp L   &kp SEMI            &kp SQT
   &kp LSHFT      &kp Z     &kp X      &kp C       &kp V   &kp B   &bksp_concatenate  &mo_tap 1 END  &kp PG_UP    &kp UP  &kp LEFT  &kp RIGHT   &kp N            &kp M  &kp COMMA   &kp DOT   &kp FSLH          &kp RSHFT
  &td_toggle_1  &kp LCTRL  &kp LALT  &kp MINUS    &kp LGUI          &kp SPACE  &kp TAB  &mt LSHFT PG_DN  &kp DOWN   &kp RET  &kp SPACE                 &kp RGUI  &kp EQUAL  &kp RALT  &kp RCTRL         &td_toggle_1
            >;
        };

        layer_mo1 {
            bindings = <
 &kp C_BRI_DN     &kp C_BRI_UP  &none  &none     &kp F5                                                                                     &kp C_PP  &kp C_NEXT    &kp C_MUTE  &kp C_VOL_DN    &kp C_VOL_UP
 &kp GRAVE      &to 2           &to_5        &none       &magic 7 0   &kp F6                                                                    &kp F7    &kp KP_NUM      &kp SLCK       &kp INS        &kp PSCRN      &none
     &to 0    &kp ESC         &none    &kp UP_ARROW          &kp F11  &kp F12                                                                &kp C_PREV     &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_SLASH      &none
  &cap_tab      &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW    &to 4                                                                &kp C_NEXT     &kp KP_N4     &kp KP_N5     &kp KP_N6  &kp KP_MULTIPLY      &none
 &kp LSHFT      &none           &none           &none            &none    &none   &bksp_concatenate  &kp END  &kp PG_UP  &kp PG_UP    &none    &kp DEL    &kp C_PP     &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_MINUS  &kp RSHFT
 &td_toggle_1  &kp LCTRL        &kp LALT       &kp MINUS         &kp LGUI           &kp SPACE  &kp TAB  &mt LSHFT PG_DN  &mt LSHFT PG_DN  &kp RET  &kp SPACE                 &kp KP_N0    &kp KP_DOT  &kp KP_ENTER      &kp KP_PLUS  &td_toggle_1
            >;
        };

        layer_l90_win {
            bindings = <
  &mt ESC F1     &kp F2    &kp F3    &kp F4  &magic 7 0                                                                                &mo_tap 3 C_PP   &mt F9 C_NEXT  &kp F10    &kp F11      &kp F12
      &kp N1     &kp N2    &kp N3    &kp N4      &kp N5  &kp N6                                                                &kp N7           &kp N8     &kp N9    &kp N0   &kp LBKT           &kp RBKT
 &td_layer_2      &kp Q     &kp W     &kp E       &kp R   &kp T                                                                 &kp Y            &kp U      &kp I     &kp O      &kp P  &mo_tap 3 BSLH
    &cap_tab      &kp A     &kp S     &kp D       &kp F   &kp G                                                                 &kp H            &kp J      &kp K     &kp L   &kp SEMI            &kp SQT
   &kp LSHFT      &kp Z     &kp X     &kp C       &kp V   &kp B   &bksp_concatenate  &mo_tap 3 END  &kp PG_UP    &kp UP  &kp LEFT  &kp RIGHT   &kp N            &kp M  &kp COMMA   &kp DOT   &kp FSLH          &kp RSHFT
  &td_lshift  &kp LCTRL  &kp LGUI  &kp LALT   &kp MINUS          &kp SPACE  &kp TAB  &mt LSHFT PG_DN  &kp DOWN   &kp RET  &kp SPACE                &kp EQUAL   &kp RALT  &kp RGUI  &kp RCTRL         &td_rshift
            >;
        };

        layer_mo2 {
            bindings = <
&kp C_BRI_DN     &kp C_BRI_UP  &none  &none     &kp F5                                                                                               &kp F8         &none         &kp C_MUTE      &kp C_VOL_DN   &kp C_VOL_UP
 &kp GRAVE      &to 0         &none         &none  &magic 7 0   &kp F6                                                                    &mt F7 C_PREV    &kp KP_NUM      &kp SLCK       &kp INS        &kp PSCRN      &none
     &to 2    &kp ESC         &none        &kp UP     &kp F11  &kp F12                                                                &kp C_PREV     &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_SLASH      &none
  &cap_tab      &none      &kp LEFT      &kp DOWN   &kp RIGHT    &to 4                                                                &kp C_NEXT     &kp KP_N4     &kp KP_N5     &kp KP_N6  &kp KP_MULTIPLY      &none
 &kp LSHFT      &none         &none         &none       &none    &none   &bksp_concatenate  &kp END  &kp PG_UP  &kp PG_UP    &none    &kp DEL    &kp C_PP     &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_MINUS  &kp RSHFT
 &kp LSHFT  &kp LCTRL      &kp LGUI      &kp LALT   &kp MINUS           &kp SPACE  &kp TAB  &mt LSHFT PG_DN  &mt LSHFT PG_DN  &kp RET  &kp SPACE                 &kp KP_N0    &kp KP_DOT  &kp KP_ENTER      &kp KP_PLUS  &kp RSHFT
            >;
        };

        layer_gaming {
            bindings = <
 &mt ESC F1     &kp F2    &kp F3    &kp F4  &magic 7 0                                                                                    &kp F8     &kp F9   &kp F10    &kp F11    &kp F12 
     &kp N9     &kp N0    &kp N1    &kp N2      &kp N3  &kp N4                                                                 &kp N5     &kp N6     &kp N7    &kp N8   &kp LBKT   &kp RBKT
  &td_qgame    &kp TAB     &kp Q     &kp W       &kp E   &kp R                                                                  &kp Y      &kp U      &kp I     &kp O      &kp P   &kp BSLH
      &kp G   &kp CAPS     &kp A     &kp S       &kp D   &kp F                                                                  &kp H      &kp J      &kp K     &kp L   &kp SEMI    &kp SQT
      &kp B  &kp LSHFT     &kp Z     &kp X       &kp C   &kp V   &kp BSPC  &kp END  &kp PG_UP    &kp UP  &kp LEFT  &kp RIGHT   &kp N      &kp M  &kp COMMA   &kp DOT   &kp FSLH  &kp RSHFT
  &kp LSHFT  &kp LALT  &kp LGUI  &kp MINUS   &kp LCTRL          &kp SPACE   &kp TAB  &mt LSHFT PG_DN  &kp DOWN   &kp RET  &kp SPACE          &kp RCTRL   &kp EQUAL  &kp RGUI  &kp RALT  &kp RSHFT
            >;
        };
        
        layer_generic_win {
            bindings = <
&mt ESC F1     &kp F2    &kp F3    &kp F4  &magic 7 0                                                                                &mo_tap 6 C_PP   &mt F9 C_NEXT  &kp F10    &kp F11      &kp F12
      &kp N1     &kp N2    &kp N3    &kp N4      &kp N5  &kp N6                                                                &kp N7           &kp N8     &kp N9    &kp N0   &kp LBKT           &kp RBKT
 &td_layer_3      &win_quit     &kp W     &kp E       &kp R   &kp T                                                                 &kp Y            &kp U      &kp I     &kp O      &kp P  &mo_tap 6 BSLH
    &cap_tab_tri      &kp A     &kp S     &kp D       &kp F   &kp G                                                                 &kp H            &kp J      &kp K     &kp L   &kp SEMI            &kp SQT
   &kp LSHFT      &kp Z     &kp X     &kp C       &kp V   &kp B   &bksp_concatenate  &mo_tap 6 END  &kp PG_UP    &kp UP  &kp LEFT  &kp RIGHT   &kp N            &win_menu  &kp COMMA   &kp DOT   &kp FSLH          &kp RSHFT
  &td_toggle_1  &kp LALT  &kp LGUI  &kp MINUS   &kp LCTRL          &kp SPACE  &kp TAB  &mt LSHFT PG_DN  &kp DOWN   &kp RET  &kp SPACE                &kp RCTRL   &kp EQUAL  &kp RGUI  &kp RALT         &td_rshift
            >;
        };

        layer_mo3 {
            bindings = <
 &kp C_BRI_DN     &kp C_BRI_UP  &mt RG(TAB) RG(PSCRN)  &kp RG(RS(S))    &mt RG(RA(PSCRN)) F5                                                                      &kp F8          &none       &kp C_MUTE      &kp C_VOL_DN    &kp C_VOL_UP
 &kp GRAVE      &none         &to 0         &none  &magic 7 0   &kp F6                                                                    &mt F7 C_PREV    &kp KP_NUM      &kp SLCK       &kp INS        &kp PSCRN      &none
     &to 5    &kp ESC         &none        &kp UP     &kp F11  &kp F12                                                                &kp C_PREV     &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_SLASH      &none
  &cap_tab_tri      &none      &kp LEFT      &kp DOWN   &kp RIGHT    &to 4                                                                &kp C_NEXT     &kp KP_N4     &kp KP_N5     &kp KP_N6  &kp KP_MULTIPLY      &none
 &kp LSHFT      &none         &none         &none       &none    &none   &bksp_concatenate  &kp END  &kp PG_UP  &kp PG_UP    &none    &kp DEL    &kp C_PP     &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_MINUS  &kp RSHFT
 &td_toggle_1  &kp LALT     &kp LGUI     &kp MINUS      &kp LCTRL           &kp SPACE  &kp TAB  &mt LSHFT PG_DN  &mt LSHFT PG_DN  &kp RET  &kp SPACE                 &kp KP_N0    &kp KP_DOT  &kp KP_ENTER      &kp KP_PLUS  &kp RSHFT
            >;
        };

        layer_magic_7_0 {
            bindings = <
 &bt BT_CLR            &none            &none            &none            &none                                                                            &none   &none   &none   &none  &bt BT_CLR_ALL
      &bt_0            &bt_1            &bt_2            &bt_3     &out OUT_USB            &none                                                   &none   &none   &none   &none   &none           &none
      &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none   &none   &none   &none   &none           &none
      &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none   &none   &none   &none   &none           &none
      &none            &none            &none            &none            &none            &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none           &none
     &sys_reset            &none            &none            &none            &none                    &none   &none   &none   &none   &none   &none           &none   &none   &none   &none          &sys_reset
            >;
        };
		
		Override {
            bindings = <
	  &trans            &trans            &trans            &trans            &trans                                                                            &trans   &trans   &trans   &trans  	       &trans
      &trans            &trans            &trans            &trans            &trans            &trans                                                   &trans   &trans   &trans   &trans   &trans           &trans
      &trans            &trans            &trans            &trans            &trans            &trans                                                   &trans   &trans   &trans   &trans   &trans           &trans
      &trans            &trans            &trans            &trans            &trans            &trans                                                   &trans   &trans   &trans   &trans   &trans           &trans
      &trans            &trans            &trans            &trans            &trans            &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans           &trans
  &td_toggle_2            &trans            &trans            &trans            &trans                    &trans   &trans   &trans   &trans   &trans   &trans           &trans   &trans   &trans   &trans           &kp RSHFT
            >;
        };

    };
};
